/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;


import Controladores.Conexion;
import Modelos.MCProducto;
import Modelos.ValidadorEntradas;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carlos Bedoy
 */
public class BusquedaInventario extends javax.swing.JFrame {

    private DefaultTableModel modelo = new DefaultTableModel();
    private Map<Integer, MCProducto> productos;
    public static BusquedaInventario mthis;
   

    /**
     * Creates new form BusquedaInventario
     */
    public BusquedaInventario() {
        initComponents();
        this.setBounds(490, 60, this.getWidth(), this.getHeight());
        setVisible(true);
        setFiltros();
        
        productos = new HashMap<Integer, MCProducto>();
        
        //consultar();
        this.tablaInventario.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent tme) {
                
            }
        });
       consultar();
       mthis = this;
       Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imagenes/icon_128.png"));
        setIconImage(icon);
    }

    public void consultar() {
        modelo = new DefaultTableModel();
        this.tablaInventario.setModel(modelo);
        
        this.modelo.setColumnIdentifiers(new Object[]{"Clave", "Tipo", "Modelo", 
            "Costo", "Precio", "Numero", "Cantidad"});
        int iterador=0;
        try {
            ResultSet rs = new Conexion().getSt().executeQuery(""
                    + "select idArticulo, tipo, modelo, costo, precio, numero, cantidad, precio*1.16, idCaracteristicas "
                    + "from articulo, tipo, caracteristicas "
                    + "where Tipo_idTipo = idTipo and Articulo_idArticulo = idArticulo "
                    + "and cantidad>0 ");
            while (rs.next()) {
               
                MCProducto articulo = new MCProducto();
                articulo.setId(rs.getInt(1));
                articulo.setTipo(rs.getString(2));
                articulo.setModelo(rs.getString(3));
                articulo.setCosto(rs.getFloat(4));
                articulo.setPrecio(rs.getFloat(5));
                articulo.setNumero(rs.getFloat(6));
                articulo.setCantidad(rs.getInt(7));
                articulo.setPrecioIva(rs.getFloat(8));
                articulo.setIdCaracteristica(rs.getInt(9));
                
                productos.put(iterador++, articulo);
                modelo.addRow(articulo.addRowProducto());
                   
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error 01 : Error de servidor", "Alerta", JOptionPane.ERROR_MESSAGE);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo1 = new javax.swing.JPanel();
        bAnadir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInventario = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        sBuscar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        sFiltro = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        fondo1.setBackground(new java.awt.Color(255, 255, 255));
        fondo1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bAnadir.setBackground(new java.awt.Color(0, 0, 0));
        bAnadir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bAnadir.setForeground(new java.awt.Color(255, 255, 255));
        bAnadir.setText("AÃ‘ADIR");
        bAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAnadirActionPerformed(evt);
            }
        });

        tablaInventario.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaInventario);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("BUSCAR");

        sBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sBuscarActionPerformed(evt);
            }
        });
        sBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sBuscarKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("FILTRAR POR:");

        sFiltro.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout fondo1Layout = new javax.swing.GroupLayout(fondo1);
        fondo1.setLayout(fondo1Layout);
        fondo1Layout.setHorizontalGroup(
            fondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondo1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondo1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bAnadir, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fondo1Layout.createSequentialGroup()
                        .addGroup(fondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, fondo1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        fondo1Layout.setVerticalGroup(
            fondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondo1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fondo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(sFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bAnadir)
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(0, 102, 153));

        jMenu1.setText("  ");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sBuscarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarDato();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_sBuscarKeyPressed

    private void bAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnadirActionPerformed

       anadirProducto();
    }//GEN-LAST:event_bAnadirActionPerformed

    private void sBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BusquedaInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BusquedaInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BusquedaInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BusquedaInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BusquedaInventario().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAnadir;
    private javax.swing.JPanel fondo1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField sBuscar;
    private javax.swing.JComboBox sFiltro;
    public javax.swing.JTable tablaInventario;
    // End of variables declaration//GEN-END:variables

      private void setFiltros() {
        this.sFiltro.removeAllItems();
        Object[] filtros = new Object[]{"modelo", "tipo", "precio", "costo", "numero", "cantidad"};
        for (Object o : filtros) {
            sFiltro.addItem(o);
        }
    }

    
    private void busquedaPersonalizada() {
        int iterador=0;
        this.productos.clear();
         modelo = new DefaultTableModel();
                this.tablaInventario.setModel(modelo);
                this.modelo.setColumnIdentifiers(new Object[]{"Clave", "Tipo", "Modelo", "Costo", "Precio", "Numero", "Cantidad"});
        
        try {
            
            System.out.println(""
                    + "select idArticulo, tipo, modelo, costo, precio, numero, cantidad "
                    + "from articulo, tipo, caracteristicas "
                    + "where "+this.sFiltro.getSelectedItem()+" LIKE  '%"+this.sBuscar.getText()+"%'"
                    + " and "
                    + "Tipo_idTipo = idTipo and Articulo_idArticulo = idArticulo ");
            
            
            ResultSet rs = new Conexion().getSt().executeQuery(""
                    + "select idArticulo, tipo, modelo, costo, precio, numero, cantidad "
                    + "from articulo, tipo, caracteristicas "
                    + "where "+this.sFiltro.getSelectedItem()+" LIKE  '%"+this.sBuscar.getText()+"%'"
                    + " and "
                    + "Tipo_idTipo = idTipo and Articulo_idArticulo = idArticulo ");
            
            
            while (rs.next()) {
                MCProducto articulo = new MCProducto();
                articulo.setId(rs.getInt(1));
                articulo.setTipo(rs.getString(2));
                articulo.setModelo(rs.getString(3));
                articulo.setCosto(rs.getFloat(4));
                articulo.setPrecio(rs.getFloat(5));
                articulo.setNumero(rs.getFloat(6));
                articulo.setCantidad(rs.getInt(7));
                articulo.setPrecioIva(rs.getFloat(5)*1.16F);
                productos.put(iterador++, articulo);
                modelo.addRow(articulo.addRowProducto());
            }
        } catch (SQLException ex) {
            //JOptionPane.showMessageDialog(this, "Error 01 : Error de servidor", "Alerta", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    
        
        
        
        
    }

    private void buscarDato() {
        String respuesta = ValidadorEntradas.validarCampoBusqueda(this.sBuscar.getText().toString());
            if(respuesta.equals("OK"))
                this.busquedaPersonalizada();
            else
                JOptionPane.showMessageDialog(this, respuesta);
            
            sBuscar.setText(null);
    }

    private void anadirProducto() {
         MCProducto producto = productos.get(this.tablaInventario.getSelectedRow());
        // TODO add your handling code here:
        int cantidad=0;
        while(true){
            try{
            cantidad = Integer.parseInt(JOptionPane.showInputDialog
                    (this, "Â¿Cantidad de ariculos de este tipo?\nEntre [ 1 - "+producto.getCantidad()+" ]"));
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Solo se permiten numeros");
                cantidad = 9999999;
            }
            if(cantidad == 9999999)
                break;
            if(cantidad > producto.getCantidad()){
                JOptionPane.showMessageDialog(this, "Numero excedido\nNo existen tantos articulos");
                cantidad = 0;
            }else if(cantidad<=0){
                JOptionPane.showMessageDialog(this, "No se permiten numeros negativos");
                cantidad = 0;
            }else
                break;
        }
     //  Venta.mthis.modeloTabla.addRow(new);
       if(!(cantidad<=0 || cantidad == 9999999 || cantidad >producto.getCantidad())){
           
           this.tablaInventario.setValueAt(producto.getCantidad()-cantidad, tablaInventario.getSelectedRow(), 6);
           
            Object[] os = new Object[]{producto.getId(), producto.getTipo(), 
                producto.getModelo(), producto.getNumero(), cantidad, 
                    String.format("%.2f", producto.getPrecio()), 
                        String.format("%.2f", producto.getPrecioIva())};
            Venta.mthis.modeloTabla.addRow(os);
            producto.setCantidad(cantidad);
            Venta.mthis.productos.put(Venta.mthis.contadorAVender++, producto);
            Venta.mthis.totalAPagar+=producto.getPrecioIva()*cantidad;
            Venta.mthis.Costo+=producto.getCosto()*cantidad;
            Venta.mthis.totalSinIva +=producto.getPrecio()*cantidad;
            Venta.mthis.sTotal.setText(String.format("%.2f", Venta.mthis.totalAPagar));
       }
    }
    
    
}
